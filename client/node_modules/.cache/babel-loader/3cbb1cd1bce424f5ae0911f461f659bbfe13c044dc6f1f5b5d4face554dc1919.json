{"ast":null,"code":"var _jsxFileName = \"/Users/theanthonywong/Code/cardGame24_v2/client/src/components/Timer.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Timer(props) {\n  _s();\n  const {\n    initialMinute = '05',\n    initialSeconds = '00'\n  } = props;\n  const [minutes, setMinutes] = useState(initialMinute);\n  const [seconds, setSeconds] = useState(initialSeconds);\n  useEffect(() => {\n    let myInterval = setInterval(() => {\n      if (seconds > 0) {\n        setSeconds(seconds - 1);\n      }\n      if (seconds === 0) {\n        if (minutes === 0) {\n          clearInterval(myInterval);\n        } else {\n          setMinutes(minutes - 1);\n          setSeconds(59);\n        }\n      }\n    }, 1000);\n    return () => {\n      clearInterval(myInterval);\n    };\n  });\n  /*     const getTimeRemaining = (e) => {\n          const total = Date.parse(e) - Date.parse(new Date());\n          const seconds = Math.floor((total / 1000) % 60);\n          const minutes = Math.floor((total / 1000 / 60) % 60);\n          const hours = Math.floor((total / 1000 / 60 / 60) % 24);\n          return {\n              total, hours, minutes, seconds\n          };\n      }\n    \n      const startTimer = (e) => {\n          let { total, hours, minutes, seconds } \n                      = getTimeRemaining(e);\n          if (total >= 0) {\n    \n              // update the timer\n              // check if less than 10 then we need to \n              // add '0' at the beginning of the variable\n              setTimer(\n                  (hours > 9 ? hours : '0' + hours) + ':' +\n                  (minutes > 9 ? minutes : '0' + minutes) + ':'\n                  + (seconds > 9 ? seconds : '0' + seconds)\n              )\n          }\n      }\n    \n    \n      const clearTimer = (e) => {\n          // If you adjust it you should also need to\n          // adjust the Endtime formula we are about\n          // to code next    \n          setTimer('05:00');\n    \n          // If you try to remove this line the \n          // updating of timer Variable will be\n          // after 1000ms or 1sec\n          if (Ref.current) clearInterval(Ref.current);\n          const id = setInterval(() => {\n              startTimer(e);\n          }, 1000)\n          Ref.current = id;\n      }\n    \n      const getDeadTime = () => {\n          let deadline = new Date();\n    \n          // This is where you need to adjust if \n          // you entend to add more time\n          deadline.setSeconds(deadline.getSeconds() + 10);\n          return deadline;\n      }\n      useEffect(() => {\n          clearTimer(getDeadTime());\n      }, []); */\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [minutes, \":\", seconds]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}\n_s(Timer, \"T5lpGhi/KdpZvRWGT4SmLqV1bhA=\");\n_c = Timer;\nexport default Timer;\nvar _c;\n$RefreshReg$(_c, \"Timer\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Timer","props","_s","initialMinute","initialSeconds","minutes","setMinutes","seconds","setSeconds","myInterval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/theanthonywong/Code/cardGame24_v2/client/src/components/Timer.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nfunction Timer(props) {\n\n    const {initialMinute = '05',initialSeconds = '00'} = props;\n    const [ minutes, setMinutes ] = useState(initialMinute);\n    const [seconds, setSeconds ] =  useState(initialSeconds);\n    useEffect(()=>{\n    let myInterval = setInterval(() => {\n            if (seconds > 0) {\n                setSeconds(seconds - 1);\n            }\n            if (seconds === 0) {\n                if (minutes === 0) {\n                    clearInterval(myInterval)\n                } else {\n                    setMinutes(minutes - 1);\n                    setSeconds(59);\n                }\n            } \n        }, 1000)\n        return ()=> {\n            clearInterval(myInterval);\n          };\n    });\n/*     const getTimeRemaining = (e) => {\n        const total = Date.parse(e) - Date.parse(new Date());\n        const seconds = Math.floor((total / 1000) % 60);\n        const minutes = Math.floor((total / 1000 / 60) % 60);\n        const hours = Math.floor((total / 1000 / 60 / 60) % 24);\n        return {\n            total, hours, minutes, seconds\n        };\n    }\n  \n    const startTimer = (e) => {\n        let { total, hours, minutes, seconds } \n                    = getTimeRemaining(e);\n        if (total >= 0) {\n  \n            // update the timer\n            // check if less than 10 then we need to \n            // add '0' at the beginning of the variable\n            setTimer(\n                (hours > 9 ? hours : '0' + hours) + ':' +\n                (minutes > 9 ? minutes : '0' + minutes) + ':'\n                + (seconds > 9 ? seconds : '0' + seconds)\n            )\n        }\n    }\n  \n  \n    const clearTimer = (e) => {\n        // If you adjust it you should also need to\n        // adjust the Endtime formula we are about\n        // to code next    \n        setTimer('05:00');\n  \n        // If you try to remove this line the \n        // updating of timer Variable will be\n        // after 1000ms or 1sec\n        if (Ref.current) clearInterval(Ref.current);\n        const id = setInterval(() => {\n            startTimer(e);\n        }, 1000)\n        Ref.current = id;\n    }\n  \n    const getDeadTime = () => {\n        let deadline = new Date();\n  \n        // This is where you need to adjust if \n        // you entend to add more time\n        deadline.setSeconds(deadline.getSeconds() + 10);\n        return deadline;\n    }\n    useEffect(() => {\n        clearTimer(getDeadTime());\n    }, []); */\n    return (\n        <div >\n            {minutes}:{seconds}\n        </div>\n    )\n}\n\nexport default Timer"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,KAAKA,CAACC,KAAK,EAAE;EAAAC,EAAA;EAElB,MAAM;IAACC,aAAa,GAAG,IAAI;IAACC,cAAc,GAAG;EAAI,CAAC,GAAGH,KAAK;EAC1D,MAAM,CAAEI,OAAO,EAAEC,UAAU,CAAE,GAAGV,QAAQ,CAACO,aAAa,CAAC;EACvD,MAAM,CAACI,OAAO,EAAEC,UAAU,CAAE,GAAIZ,QAAQ,CAACQ,cAAc,CAAC;EACxDP,SAAS,CAAC,MAAI;IACd,IAAIY,UAAU,GAAGC,WAAW,CAAC,MAAM;MAC3B,IAAIH,OAAO,GAAG,CAAC,EAAE;QACbC,UAAU,CAACD,OAAO,GAAG,CAAC,CAAC;MAC3B;MACA,IAAIA,OAAO,KAAK,CAAC,EAAE;QACf,IAAIF,OAAO,KAAK,CAAC,EAAE;UACfM,aAAa,CAACF,UAAU,CAAC;QAC7B,CAAC,MAAM;UACHH,UAAU,CAACD,OAAO,GAAG,CAAC,CAAC;UACvBG,UAAU,CAAC,EAAE,CAAC;QAClB;MACJ;IACJ,CAAC,EAAE,IAAI,CAAC;IACR,OAAO,MAAK;MACRG,aAAa,CAACF,UAAU,CAAC;IAC3B,CAAC;EACP,CAAC,CAAC;EACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,oBACIV,OAAA;IAAAa,QAAA,GACKP,OAAO,EAAC,GAAC,EAACE,OAAO;EAAA;IAAAM,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QAChB;AAEd;AAACd,EAAA,CAlFQF,KAAK;AAAAiB,EAAA,GAALjB,KAAK;AAoFd,eAAeA,KAAK;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}