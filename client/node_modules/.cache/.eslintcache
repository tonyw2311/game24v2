[{"/Users/theanthonywong/Code/cardGame24_v2/client/src/index.js":"1","/Users/theanthonywong/Code/cardGame24_v2/client/src/components/App.jsx":"2","/Users/theanthonywong/Code/cardGame24_v2/client/src/components/GamePage.jsx":"3","/Users/theanthonywong/Code/cardGame24_v2/client/src/components/NavBar.jsx":"4","/Users/theanthonywong/Code/cardGame24_v2/client/src/components/GamePage/GameSection.jsx":"5","/Users/theanthonywong/Code/cardGame24_v2/client/src/components/GamePage/Card.jsx":"6","/Users/theanthonywong/Code/cardGame24_v2/client/src/components/GamePage/CardSuit.jsx":"7","/Users/theanthonywong/Code/cardGame24_v2/client/src/components/Home.jsx":"8","/Users/theanthonywong/Code/cardGame24_v2/client/src/components/GamePage/Leaderboard.jsx":"9","/Users/theanthonywong/Code/cardGame24_v2/client/src/components/GamePage/SubmitButton.jsx":"10","/Users/theanthonywong/Code/cardGame24_v2/client/src/components/GamePage/OperationBox.jsx":"11","/Users/theanthonywong/Code/cardGame24_v2/client/src/components/GamePage/Parenthesis.jsx":"12","/Users/theanthonywong/Code/cardGame24_v2/client/src/components/Instructions.jsx":"13","/Users/theanthonywong/Code/cardGame24_v2/client/src/components/Timer.jsx":"14","/Users/theanthonywong/Code/cardGame24_v2/client/src/components/NotFound.jsx":"15","/Users/theanthonywong/Code/cardGame24_v2/client/src/components/SubmitScorePage.jsx":"16","/Users/theanthonywong/Code/cardGame24_v2/client/src/components/GamePage/SubmitScore.jsx":"17"},{"size":626,"mtime":1678389141468,"results":"18","hashOfConfig":"19"},{"size":1422,"mtime":1678732890867,"results":"20","hashOfConfig":"19"},{"size":2599,"mtime":1678731788054,"results":"21","hashOfConfig":"19"},{"size":357,"mtime":1678717745358,"results":"22","hashOfConfig":"19"},{"size":9767,"mtime":1678726266201,"results":"23","hashOfConfig":"19"},{"size":662,"mtime":1678413128424,"results":"24","hashOfConfig":"19"},{"size":1639,"mtime":1678413289568,"results":"25","hashOfConfig":"19"},{"size":712,"mtime":1678720853879,"results":"26","hashOfConfig":"19"},{"size":687,"mtime":1678727933520,"results":"27","hashOfConfig":"19"},{"size":440,"mtime":1678660717634,"results":"28","hashOfConfig":"19"},{"size":394,"mtime":1677999050425,"results":"29","hashOfConfig":"19"},{"size":408,"mtime":1678132710762,"results":"30","hashOfConfig":"19"},{"size":1687,"mtime":1678725942648,"results":"31","hashOfConfig":"19"},{"size":1063,"mtime":1678731630602,"results":"32","hashOfConfig":"19"},{"size":328,"mtime":1678638379727,"results":"33","hashOfConfig":"19"},{"size":1534,"mtime":1678731592495,"results":"34","hashOfConfig":"19"},{"size":628,"mtime":1678731568186,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"54v9hs",{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/theanthonywong/Code/cardGame24_v2/client/src/index.js",[],[],"/Users/theanthonywong/Code/cardGame24_v2/client/src/components/App.jsx",[],[],"/Users/theanthonywong/Code/cardGame24_v2/client/src/components/GamePage.jsx",["91"],[],"import React, { useState, useEffect } from \"react\";// {useState}\nimport GameSection from \"./GamePage/GameSection\";\nimport Leaderboard from \"./GamePage/Leaderboard\";\nimport Timer from \"./Timer\";\nimport { useNavigate } from \"react-router-dom\";\nimport SubmitScore from \"./GamePage/SubmitScore\";\n\n\n\nfunction GamePage(props) {\n    const navigate = useNavigate();\n    const [randFour, setRandFour] = useState([1, 2, 3, 4]);\n    const [randCard, setRandCard] = useState([\"spade\", \"heart\", \"club\", \"diamond\"]);\n    const [score, setScore] = useState(0);\n    const [nameList, setNameList] = useState(\"\");\n    const [scoreList, setScoreList] = useState(\"\");\n    const [isHidden, setIsHidden] = useState(true);\n\n\n    //functions from node\n    useEffect(() => {\n        fetch(\"http://localhost:8000/message\")\n            .then((res) => res.json())\n            .then((data) => { setRandFour(data.randFour); setRandCard(data.randCard) });\n    }, []);\n\n    //data from mongoDB->node->react\n    useEffect(() => {\n        fetch(\"http://localhost:8000/home\")\n            .then((res) => res.json())\n            .then((dataSet) => {\n                let tempNameList = []\n                let tempScoreList = []\n                dataSet.forEach(data => {\n                    tempNameList.push(data.name);\n                    tempScoreList.push(data.score);\n                })\n                setNameList(tempNameList);\n                setScoreList(tempScoreList);\n            });\n    }, []);\n\n    function nextSet() {\n        fetch(\"http://localhost:8000/message\")\n            .then((res) => res.json())\n            .then((data) => { setRandFour(data.randFour); setRandCard(data.randCard) });\n    };\n\n    function updateScore(isCorrect) {\n        if (isCorrect) {\n            setScore(score + 100);\n        }\n        else {\n            setScore(score - 25);\n        }\n    }\n\n\n    function changeVisibility() {\n        setIsHidden(!isHidden)\n    }\n\n\n    return (\n        <div>\n            <br />\n            <div style={{ display: \"inline-flex\" }}>\n                <h1> Score: {score}</h1>\n            </div>\n            <Timer changeVisibility={changeVisibility} setIsFinished={props.setIsFinished} />\n\n            <GameSection randFour={randFour} randCard={randCard} updateScore={updateScore} nextSet={nextSet} />\n\n            <button onClick={changeVisibility}>View Leaderboard</button>\n            <Leaderboard name={nameList} score={scoreList} isHidden={isHidden} />\n            <SubmitScore isHiddenScore = {props.isFinished} score = {score}></SubmitScore>\n          \n\n        </div>\n    );\n}\nexport default GamePage;","/Users/theanthonywong/Code/cardGame24_v2/client/src/components/NavBar.jsx",[],[],"/Users/theanthonywong/Code/cardGame24_v2/client/src/components/GamePage/GameSection.jsx",["92","93","94","95"],[],"import React, { useState, useEffect } from \"react\";\nimport Card from \"./Card\"\nimport OperationBox from \"./OperationBox\";\nimport Parenthesis from \"./Parenthesis\";\nimport SubmitButton from \"./SubmitButton\";\n\nfunction GameSection(props) {\n\n    useEffect(() => {\n        updateBoxes();\n    }, [props.randCard, props.randFour]);\n\n    const [isActive, setIsActive] = useState([\n        {\n            id: 0,\n            bool: true,\n            operation: \"\"\n        },\n        {\n            id: 1,\n            bool: false,\n            operation: \"\"\n        },\n        {\n            id: 2,\n            bool: false,\n            operation: \"\"\n        },\n\n    ]);\n    const [isActivePar, setIsActivePar] = useState([\n        {\n            id: 0,\n            bool: false,\n            text: \"(\"\n        },\n        {\n            id: 1,\n            bool: false,\n            text: \"(\"\n        },\n        {\n            id: 2,\n            bool: false,\n            text: \")\"\n        },\n        {\n            id: 3,\n            bool: false,\n            text: \"(\"\n        },\n        {\n            id: 4,\n            bool: false,\n            text: \")\"\n        },\n        {\n            id: 5,\n            bool: false,\n            text: \")\"\n        }]);\n\n    const [boxes, setBoxes] = useState([\n        {\n            id: 0,\n            number: props.randFour[0],\n            suit: props.randCard[0]\n        },\n        {\n            id: 1,\n            number: props.randFour[1],\n            suit: props.randCard[1]\n        },\n        {\n            id: 2,\n            number: props.randFour[2],\n            suit: props.randCard[2]\n        },\n        {\n            id: 3,\n            number: props.randFour[3],\n            suit: props.randCard[3]\n        }\n\n    ])\n    function reset() {\n        updateBoxes();\n        setIsActivePar([\n            {\n                id: 0,\n                bool: false,\n                text: \"(\"\n            },\n            {\n                id: 1,\n                bool: false,\n                text: \"(\"\n            },\n            {\n                id: 2,\n                bool: false,\n                text: \")\"\n            },\n            {\n                id: 3,\n                bool: false,\n                text: \"(\"\n            },\n            {\n                id: 4,\n                bool: false,\n                text: \")\"\n            },\n            {\n                id: 5,\n                bool: false,\n                text: \")\"\n            }]);\n        setIsActive([{\n            id: 0,\n            bool: true,\n            operation: \"\"\n        },\n        {\n            id: 1,\n            bool: false,\n            operation: \"\"\n        },\n        {\n            id: 2,\n            bool: false,\n            operation: \"\"\n        },])\n    }\n    function updateBoxes() {\n        let numbers = props.randFour\n        let cards = props.randCard\n        const update = boxes.map(box => {\n            return {\n                ...box,\n                number: numbers[box.id],\n                suit: cards[box.id],\n            }\n        })\n        setBoxes(update)\n    }\n\n    function arithmetics(event) {\n        const x = event.target.value;\n        const updateActivity = isActive.map(i => {\n            if (i.bool) {\n                return {\n                    ...i,\n                    operation: x\n                }\n            }\n            else {\n                return { ...i }\n            }\n        })\n        setIsActive(updateActivity)\n    }\n\n    function handleClickPar(id) {\n        const updateActivity = isActivePar.map(i => {\n            if (i.id === id) {\n                return {\n                    ...i,\n                    bool: !i.bool\n                }\n            }\n            else {\n                return {\n                    ...i\n                }\n            }\n        })\n        setIsActivePar(updateActivity);\n    }\n    function handleClickOP(id) {\n        const updateActivity = isActive.map(i => {\n            if (i.id === id) {\n                return {\n                    ...i,\n                    bool: true\n                }\n            }\n            else {\n                return {\n                    ...i,\n                    bool: false\n                }\n            }\n        })\n        setIsActive(updateActivity);\n    };\n\n    const swapBoxes = (fromBox, toBox) => {\n        let fromNumber = boxes[fromBox.id].number;\n        let toNumber = boxes[toBox.id].number;\n        let fromSuit = boxes[fromBox.id].suit;\n        let toSuit = boxes[toBox.id].suit;\n\n        const updateBox = boxes.map(box => {\n            if (box.id === fromBox.id) {\n                return {\n                    ...box,\n                    number: toNumber,\n                    suit: toSuit\n                }\n            } else if (box.id === toBox.id) {\n                return {\n                    ...box,\n                    number: fromNumber,\n                    suit: fromSuit\n                }\n            } else {\n                return box;\n            }\n        });\n        setBoxes(updateBox);\n    };\n\n    const handleDragStart = data => event => {\n        let fromBox = JSON.stringify({ id: data.id });\n        event.dataTransfer.setData(\"dragContent\", fromBox);\n\n    };\n\n    const handleDragOver = data => event => {\n        event.preventDefault(); // Necessary. Allows us to drop.\n        return false;\n    };\n\n    const handleDrop = data => event => {\n        event.preventDefault();\n\n        let fromBox = JSON.parse(event.dataTransfer.getData(\"dragContent\"));\n        let toBox = { id: data.id };\n        swapBoxes(fromBox, toBox);\n\n        return false;\n    };\n    const [evaluateBool, setEvaluateBool] = useState(\"\");\n    const [evaluateText, setEvaluateText] = useState(null);\n\n    function evaluation() {\n        if (evaluateText === 'CORRECT') {\n            setEvaluateText(\"\")\n            props.nextSet();\n            reset();\n            setEvaluateBool(false);\n        } else {\n            let parValue = isActivePar.map(i => {\n                if (i.bool) {\n                    return i.text;\n                }\n                else {\n                    return \"\";\n                }\n            });\n            let equationString = parValue[0] + boxes[0].number.toString() +\n                isActive[0].operation + parValue[1] + boxes[1].number.toString() +\n                parValue[2] + isActive[1].operation + parValue[3] + boxes[2].number.toString() + parValue[4] +\n                isActive[2].operation + boxes[3].number.toString() + parValue[5];\n            try {\n                setEvaluateBool(eval(equationString) === 24)\n                if ((eval(equationString) === 24)) {\n                    setEvaluateText(\"CORRECT\");\n                } else {\n                    setEvaluateText(\"WRONG\");\n                }\n                try{\n                props.updateScore((eval(equationString) === 24))}\n                catch{\n                \n                }\n            }\n            catch (err) {\n\n                setEvaluateText(\"ERROR\");\n            }\n        }\n    }\n\n\n    return (\n        <div className=\"box\">\n            <div className=\"\">\n                <div className=\"game-grid-organization\">\n                    <Parenthesis onChecked={handleClickPar} id={isActivePar[0].id} boolean={isActivePar[0].bool} text={isActivePar[0].text} />\n                    <Card suit={boxes[0].suit} number={boxes[0].number} id={0} draggable={\"true\"} onDragStart={handleDragStart} onDragOver={handleDragOver} onDrop={handleDrop} />\n\n                    <OperationBox boolean={isActive[0].bool} onChecked={handleClickOP} text={isActive[0].operation} id={0} />\n                    <Parenthesis onChecked={handleClickPar} id={isActivePar[1].id} boolean={isActivePar[1].bool} text={isActivePar[1].text} />\n                    <Card suit={boxes[1].suit} number={boxes[1].number} id={1} draggable={\"true\"} onDragStart={handleDragStart} onDragOver={handleDragOver} onDrop={handleDrop} />\n\n                    <Parenthesis onChecked={handleClickPar} id={isActivePar[2].id} boolean={isActivePar[2].bool} text={isActivePar[2].text} />\n                    <OperationBox boolean={isActive[1].bool} onChecked={handleClickOP} text={isActive[1].operation} id={1} />\n                    <Parenthesis onChecked={handleClickPar} id={isActivePar[3].id} boolean={isActivePar[3].bool} text={isActivePar[3].text} />\n                    <Card suit={boxes[2].suit} number={boxes[2].number} id={2} draggable={\"true\"} onDragStart={handleDragStart} onDragOver={handleDragOver} onDrop={handleDrop} />\n\n                    <Parenthesis onChecked={handleClickPar} id={isActivePar[4].id} boolean={isActivePar[4].bool} text={isActivePar[4].text} />\n                    <OperationBox boolean={isActive[2].bool} onChecked={handleClickOP} text={isActive[2].operation} id={2} />\n                    <Card suit={boxes[3].suit} number={boxes[3].number} id={3} draggable={\"true\"} onDragStart={handleDragStart} onDragOver={handleDragOver} onDrop={handleDrop} />\n                    <Parenthesis onChecked={handleClickPar} id={isActivePar[5].id} boolean={isActivePar[5].bool} text={isActivePar[5].text} />\n                </div>\n            </div>\n            <br />\n            <br />\n            <div>\n                <button onClick={arithmetics} className='arith' value=\"*\">*</button>\n                <button onClick={arithmetics} className='arith' value=\"/\">/</button>\n                <button onClick={arithmetics} className='arith' value=\"+\">+</button>\n                <button onClick={arithmetics} className='arith' value=\"-\">-</button>\n            </div>\n\n            <SubmitButton onEvaluate={evaluation} boolean={evaluateBool} text={evaluateText} />\n\n            <button onClick={reset}>Reset</button>\n\n        </div>\n    )\n}\nexport default GameSection;","/Users/theanthonywong/Code/cardGame24_v2/client/src/components/GamePage/Card.jsx",[],[],"/Users/theanthonywong/Code/cardGame24_v2/client/src/components/GamePage/CardSuit.jsx",[],[],"/Users/theanthonywong/Code/cardGame24_v2/client/src/components/Home.jsx",[],[],"/Users/theanthonywong/Code/cardGame24_v2/client/src/components/GamePage/Leaderboard.jsx",[],[],"/Users/theanthonywong/Code/cardGame24_v2/client/src/components/GamePage/SubmitButton.jsx",[],[],"/Users/theanthonywong/Code/cardGame24_v2/client/src/components/GamePage/OperationBox.jsx",[],[],"/Users/theanthonywong/Code/cardGame24_v2/client/src/components/GamePage/Parenthesis.jsx",[],[],"/Users/theanthonywong/Code/cardGame24_v2/client/src/components/Instructions.jsx",["96"],[],"import React, {useState} from \"react\";\nimport { Link } from \"react-router-dom\";\nimport GameSection from \"./GamePage/GameSection\";\n\nfunction Instructions() {\n    let randFour = [5, 4, 10, 4];\n    let randCard = [\"spade\", \"spade\", \"spade\", \"heart\"]\n    let image = require(\"../images/instructions.png\");\n    const [visibility, setVisibility] = useState(\"hidden\")\n    function changeVisible(){\n        setVisibility(\"visible\");\n    }\n\n    return (\n        <div >\n            <br />\n            <br />\n            <br />\n            <h1 className=\"instructions\">Instructions</h1>\n\n            <h2 className=\"instructions\">Use the four cards to make the number 24 by using\n                <br />addition, subtraction, multiplication, and division. </h2>\n            <hr></hr>\n            <br />\n            <br />\n            <br />\n            <h2 className=\"instructions\" style={{ margin: 0, marginLeft: 200 }}>Below is how you would use the game interface</h2>\n            <img src={image} className=\"instructionImage\"></img>\n            <hr></hr>\n            <br />\n            <br />\n            <br />\n\n            <h1 className=\"instructions\" style={{ margin:\"0px\"}}> Try it yourself</h1>\n            <button onClick = {changeVisible} style={{ display: \"inline-flex\", marginRight:\"20px\"}}>Click for answer</button>\n            <h2 style={{ visibility: visibility, display: \"inline-flex\", margin:\"0px 20px 10px\"}} >(10-5)*4+4 </h2>\n\n            <div>\n                <GameSection randFour={randFour} randCard={randCard} />\n                <br />\n                <Link className=\"navbar-link\" to=\"/game\">PLAY</Link>\n            </div>\n\n        </div>\n    )\n}\n\nexport default Instructions","/Users/theanthonywong/Code/cardGame24_v2/client/src/components/Timer.jsx",["97"],[],"import React, { useState, useEffect } from \"react\";\n\n\nfunction Timer(props) {\n\n    const { initialMinute = '00', initialSeconds = '30' } = props;\n    const [minutes, setMinutes] = useState(initialMinute);\n    const [seconds, setSeconds] = useState(initialSeconds);\n\n    const start = Date.now()\n\n\n\n    useEffect(() => {\n        let myInterval = setInterval(() => {\n            let delta = Math.round(Number(minutes) * 60 + Number(seconds) - (Date.now() - start) / 1000)\n\n            if (delta <= 0) {\n                setMinutes(\"00\");\n                setSeconds(\"00\");\n\n                props.setIsFinished(true);\n\n\n            } else {\n                setSeconds(Math.round(delta % 60).toLocaleString(undefined, { minimumIntegerDigits: 2 }));\n                setMinutes(Math.floor(delta / 60).toLocaleString(undefined, { minimumIntegerDigits: 2 }));\n            }\n\n        }, 1000)\n        return () => clearInterval(myInterval);\n    }, []);\n\n    return (\n        <h1 className=\"timer\" >\n            {minutes}:{seconds}\n        </h1>\n    )\n}\n\nexport default Timer","/Users/theanthonywong/Code/cardGame24_v2/client/src/components/NotFound.jsx",[],[],"/Users/theanthonywong/Code/cardGame24_v2/client/src/components/SubmitScorePage.jsx",[],[],"/Users/theanthonywong/Code/cardGame24_v2/client/src/components/GamePage/SubmitScore.jsx",[],[],{"ruleId":"98","severity":1,"message":"99","line":11,"column":11,"nodeType":"100","messageId":"101","endLine":11,"endColumn":19},{"ruleId":"102","severity":1,"message":"103","line":11,"column":8,"nodeType":"104","endLine":11,"endColumn":40,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":267,"column":33,"nodeType":"108","messageId":"109","endLine":267,"endColumn":37},{"ruleId":"106","severity":1,"message":"107","line":268,"column":22,"nodeType":"108","messageId":"109","endLine":268,"endColumn":26},{"ruleId":"106","severity":1,"message":"107","line":274,"column":36,"nodeType":"108","messageId":"109","endLine":274,"endColumn":40},{"ruleId":"110","severity":1,"message":"111","line":28,"column":13,"nodeType":"112","endLine":28,"endColumn":59},{"ruleId":"102","severity":1,"message":"113","line":32,"column":8,"nodeType":"104","endLine":32,"endColumn":10,"suggestions":"114"},"no-unused-vars","'navigate' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'updateBoxes'. Either include it or remove the dependency array.","ArrayExpression",["115"],"no-eval","eval can be harmful.","CallExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'minutes', 'props', 'seconds', and 'start'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["116"],{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},"Update the dependencies array to be: [props.randCard, props.randFour, updateBoxes]",{"range":"121","text":"122"},"Update the dependencies array to be: [minutes, props, seconds, start]",{"range":"123","text":"124"},[289,321],"[props.randCard, props.randFour, updateBoxes]",[937,939],"[minutes, props, seconds, start]"]